# vim: ts=4 textwidth=79
# -----------------------------------------------------------------------------
# Project           :   Sugar                         <http://www.ivy.fr/sugar>
# -----------------------------------------------------------------------------
# Author            :   Sebastien Pierre                     <sebastien@ivy.fr>
# License           :   Lesser GNU Public License
# -----------------------------------------------------------------------------
# Creation date     :   30-May-2008
# Last mod.         :   15-Nov-2008
# -----------------------------------------------------------------------------

@axiom  Module
@ignore WS

# -----------------------------------------------------------------------------
#
# TOKENS
#
# -----------------------------------------------------------------------------

@token WS      "[ \t]+"
@token INDENT  "\t*"
@token TAB     "\t*"
@token EOL     "\n+"
@token SYMBOL  "[a-zA-Z_\$]\w*"
@token KEY     "\w+"
@token COMMENT "#.*"
@token DOC     "\|.*"
@token STRING_SQ "'(\\\\'|[^'])*'"
@token STRING_DQ "\"(\\\\\"|[^\"])*\""
@token LP      '('
@token RP      ')'
@token LB      '['
@token RB      ']'
@token LC      '{'
@token RC      '}'
 
# -----------------------------------------------------------------------------
#
# MAIN RULES
#
# -----------------------------------------------------------------------------

@rule Module
	Comment*
	Class*
	Comment*
	Function*
	Code
@end

@rule Class
	'@class' SYMBOL (':' SYMBOL (',' SYMBOL)* )?
		Indent
		(
			(Shared*)
			(Property*)
			(Constructor?)
			(Operation*)
			(Method*)
			(Comment*)
		)
		Dedent
	'@end' EOL
@end

@rule Shared
	'@shared' TypedSymbol ('=' Expression)? EOL
	Documentation ?
@end

@rule Property
	'@property' TypedSymbol ('=' Expression)? EOL
	Documentation ?
@end

@rule Constructor
	'@operation' TypedSymbol Parameters? EOL
		FunctionBody
	'@end' EOL
@end

@rule Operation
	'@operation' TypedSymbol Parameters? EOL
		FunctionBody
	'@end' EOL
@end

@rule Method
	'@method' TypedSymbol Parameters? EOL
		FunctionBody
	'@end' EOL
@end

@rule Function
	'@function' TypedSymbol Parameters? EOL
		FunctionBody
	'@end' EOL
@end

@rule Main
	'@main'
		FunctionBody
	'@end' EOL
@end

@rule FunctionBody
	Documentation? Indent Code Dedent
@end

@rule Parameters
	TypedSymbol
	(',' TypedSymbol)*
@end

@rule Code
	 (Comment|INDENT Indentation CodeLine (Comment|EOL))*
@end

@rule Comment
	(COMMENT EOL)+
@end

@rule Documentation
	(DOC EOL)+
@end

@rule CodeLine
	Statement (';' Statement)*
@end

# -----------------------------------------------------------------------------
#
# STATEMENTS
#
# -----------------------------------------------------------------------------

@rule Statement
| Statements are instruction that do not necessarily substitute to values, this
| typically includes control flow operations and declarations, but expressions
| are also accepted as statements.
	VariableDeclaration | Assignment | Expression
@end

@rule VariableDeclaration
| Declares a variable, which may also be followed by an assignment or combined
| assignment and operation.
	'var'
		TypedSymbol     (',' TypedSymbol)*
		('=' Expression (',' Expression)* ) ?
@end

@rule Interruption
	( "return|yield" Expression)
	|
	( 'break' )
@end

@rule Assignment
| Assignments are done on _assignable_ elements (variables or slot resolution).
| The
	Assignable "=|-=|\+=|\?=" Expression
@end

@rule Assignable
| Assignable are elements that support assignment.
	SYMBOL
@end

# -----------------------------------------------------------------------------
#
# OPERATIONS
#
# -----------------------------------------------------------------------------

@rule Resolution
| A resolution is an operation/expression that travers composition/agregation
| links between values.
| NOTE: Symbol should be Expression, but we need recursion support
	Expression ( "\.| " Symbol )+
@end

@rule Invocation
	Expression (
		( '(' Arguments? ')' )
		|
		Literal
		|
		( '!' )
	)
@end

@rule Computation
| A computation involves either ONE or TWO operands.
	(
		"\-|not" Expression
	) | (
		Expression
		"-|\+|/|\*|\^|%|>|>=|<=|<|==|is|like|and|or"
		Expression
	) | (
		'(' Expression ')'
	)
@end

# -----------------------------------------------------------------------------
#
# EXPRESSIONS
#
# -----------------------------------------------------------------------------

@rule Expression
| Expressions are elements that can be substitued to values
	Invocation | Resolution | Literal
@end

@rule Arguments
	Expression ( ',' Expression )*
@end

# -----------------------------------------------------------------------------
#
# TYPE SYSTEM
#
# -----------------------------------------------------------------------------

@rule TypeExpression
	"[\w][\w\.]*" | "<[^>]>"
@end

# -----------------------------------------------------------------------------
#
# LITTERALS
#
# -----------------------------------------------------------------------------

@rule Literal
| I'm pretty sure that changing the order (like putting symbol after string may
| decrease parsing performance (symbols are more likely to happen, rules should
| be ordered according to 'likeliness' when there is no conflict between the tokens)
	Symbol | Number | String | Array | Map | Closure
@end

@rule Number
	Float | Integer
@end

@rule Integer
	"-?0x[A-Fa-f0-9]+" | "-?[0-9]+"
@end

@rule Float
	"-?[0-9]+\.[0-9]+"
@end

@rule String
	STRING_SQ | STRING_DQ
@end

@rule Symbol
	SYMBOL
@end

@rule TypedSymbol
	SYMBOL (':' TypeExpression)?
@end

@rule Array
	LB
		(Expression (',' Expression)*)?
			Indent
			(EOL INDENT Indentation Expression (',' Expression)* )*
			Dedent
		EOL?
	RB
@end

@rule Map
	LC
		(KeyValue (',' KeyValue)*)?
			Indent
			(EOL INDENT Indentation KeyValue (',' KeyValue)* )*
			Dedent
		EOL?
	RC
@end

@rule KeyValue
	( KEY | String | (LP Expression RP)) ':' Expression
@end

@rule Closure
| FIXME: Closure parsing triggers a lot of parsing as CodeLine will trigger a full parsing
| each time... using caching we can make sure that CodeLine is only examinated once
	LC
		(Parameters '|')?
		CodeLine?
		Indent
		 (EOL INDENT Indentation CodeLine)*
		Dedent
		EOL?
	RC 
@end

# -----------------------------------------------------------------------------
#
# PROCEDURES
#
# -----------------------------------------------------------------------------

@condition Indentation
	return True
@end

@procedure Indent
	# context indent += 1
@end

@procedure Dedent
	# context indent -= 1
@end

# -----------------------------------------------------------------------------
#
# MODULE CODE
#
# -----------------------------------------------------------------------------

@header
	@import lambdafactory.interfaces
	@import lambdafactory.modelbase

	@shared I = lambdafactory interfaces
	@shared F = new lambdafactory modelbase Factory ()
@end

@init
	context indent = 0
@end

# EOF - vim: ts=4 sw=4 tw=900 syn=sugar noet 
