# vim: ts=4 textwidth=79
# -----------------------------------------------------------------------------
# Project           :   Sugar                         <http://www.ivy.fr/sugar>
# Author            :   Sebastien Pierre                     <sebastien@ivy.fr>
# License           :   Lesser GNU Public License
# -----------------------------------------------------------------------------
# Creation date     :   30-May-2008
# Last mod.         :   22-Jun-2008
# -----------------------------------------------------------------------------

@axiom  Module
@ignore WS

# -----------------------------------------------------------------------------
#
# TOKENS
#
# -----------------------------------------------------------------------------

@token WS      "[ \t]+"
@token EOL     "\n+"
@token SYMBOL  "[a-zA-Z_\$]\w*"
@token COMMENT "#.*"
@token STRING_SQ "'(\\\\'|[^'])*'"
@token STRING_DQ "\"(\\\\\"|[^\"])*\""
@token LP      '('
@token RP      ')'
@token LB      '['
@token RB      ']'
@token LC      '{'
@token RC      '}'
 
# -----------------------------------------------------------------------------
#
# MAIN RULES
#
# -----------------------------------------------------------------------------

@rule Module
	Code
@end

@rule Code
	(CodeLine|Comment)*
@end

@rule Comment
	(COMMENT EOL)+
@end

@rule CodeLine
	Statement (';' Statement)* (EOL|Comment)
@end

# -----------------------------------------------------------------------------
#
# STATEMENTS
#
# -----------------------------------------------------------------------------

@rule Statement
| Statements are instruction that do not necessarily substitute to values, this
| typically includes control flow operations and declarations, but expressions
| are also accepted as statements.
	Literal
@end

@rule VariableDeclaration
| Declares a variable, which may also be followed by an assignment or combined
| assignment and operation.
	'var' SYMBOL ("=" Expression) ?
@end

@rule Assignment
| Assignments are done on _assignable_ elements (variables or slot resolution).
| The
	Assignable ('='|'-='|'+='|'?=') Expression
@end

@rule Assignable
| Assignable are elements that support assignment.
	SYMBOL
@end

# -----------------------------------------------------------------------------
#
# OPERATIONS
#
# -----------------------------------------------------------------------------

@rule Resolution
| A resolution is an operation/expression that travers composition/agregation
| links between values.
	Expression ( '\.| ' SYMBOL )+
@end

# -----------------------------------------------------------------------------
#
# EXPRESSIONS
#
# -----------------------------------------------------------------------------

@rule Expression
| Expressions are elements that can be substitued to values
	Literal
@end

# -----------------------------------------------------------------------------
#
# LITTERALS
#
# -----------------------------------------------------------------------------

@rule Literal
| I'm pretty sure that changing the order (like putting symbol after string may
| decrease parsing performance (symbols are more likely to happen, rules should
| be ordered according to 'likeliness' when there is no conflict between the tokens)
	Symbol | Number | String | Array
@end

@rule Number
	Float | Integer
@end

@rule Integer
	"-?0x[A-Fa-f0-9]+" | "-?[0-9]+"
@end

@rule Float
	"-?[0-9]+\.[0-9]+"
@end

@rule String
	STRING_SQ | STRING_DQ
@end

@rule Symbol
	SYMBOL
@end

@rule Array
	LB
		(Expression (',' Expression)*)?
	RB
@end

# -----------------------------------------------------------------------------
#
# PROCEDURES
#
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
#
# MODULE CODE
#
# -----------------------------------------------------------------------------

@header
	@import lambdafactory.interfaces
	@import lambdafactory.modelbase

	@shared I = lambdafactory interfaces
	@shared F = new lambdafactory modelbase Factory ()
@end

@init
	context indent = 0
@end

# EOF - vim: ts=4 sw=4 tw=900 syn=sugar noet 
