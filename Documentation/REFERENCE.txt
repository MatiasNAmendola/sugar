== Sugar v0.8.2
== Language Reference
-- Author: Sebastien Pierre <sebastien@ivy.fr>
-- Revision: 23-Oct-2007 (21-Aug-2007)

1. About Sugar
==============

Main thing:

 - Simple semantics
 - Syntax as clear as possible

 - Code as data
 - Meta-programming (compiled and interpreted)
 - Plastic
 - Dynamic, Reflexive
 - Concurrency
 - Advanced type system
 - Compiles to many backends (JavaScript, ActionScript, Python, Pnuts)

Benefits (of relying on LambdaFactory):

 - Write your own DSL or custom syntax
 - Easy to refactor
 - You can manipulate your code

A word about LambdaFactory and Sugar:

 - Many things specific to the back-end
 - Sugar only a syntax

2. Syntax
=========

  2.1 Basics
  ----------

   - Case sensitive
   - Indentation matters
   - Tabs are required

  2.2 Design
  ----------

   - Short learning curve for JavaScript, Python or Ruby programmers
   - Be explicit
   - Limit possibilities of variations between coding styles
   - Easy to parse, easy to write tools


  2.3 Expressions and statements
  ------------------------------

  In Sugar, most constructs are _expressions_ (they can be evaluated, meaning
  they can be substituted to a value) something). Expressions can be as simple
  as computations, or as complex as function declarations. Here is a list of
  expressions:

   - Computation
   - Invocation
   - Literal declaration (strings, numbers, primitive types)
   - Anonymous function declaration
   - Inline conditional

  On the other hand, _statements_ are operations that do not substitute to a
  value (as opposed to expressions). These operations typically trigger
  language-specific side effects, such as returning a result, raising an
  exception, etc. Sugar statements are:

   - Allocation (declaring a variable)
   - Assignment  (assigning a value to a variable)
   - Termination (return statement)
   - Interruption (raising an exception)
   - Control structures (most conditionals, loops, etc)

  _type expressions_ (see [type system]()).

  2.4 Keywords
  ------------

  Sugar defines a set of keywords that should be avoided as naming elements
  (variables, functions, etc).

  >   var                                       (variable declaration)
  >   as and or not has is in                   (operators)
  >   new                                       (instanciation)
  >   if else                                   (conditionals)
  >   for while                                 (iterations/repetitions)
  >   return break continue yield raise         (control flow manipulation)
  >   end                                       (syntax block terminator)

  Note ________________________________________________________________________
  Sugar default parser is rather flexible, so for instance you can name a
  variable 'end', though it is a keyword, and the parser will figure out whether
  it's the keyword or a variable.

  2.5 Symbols
  -----------

  Symbols are elements that allow abstraction from values. For instance, when
  you say 'a = 1', you say that the symbol 'a' abstracts the value '1', and we
  can then say that the symbol 'a' can be _evaluated_ to '1'.

  Anyway, symbols are used everywhere do declare and references variables,
  functions, classes, modules, etc.

  Symbols in Sugar are sequence of characters that:

  - Start with any of these '_$' or letters
  - Are composed of any letter, digit or any of '_$'

  Here are example uses of symbols

  >   var a                                      # (variable declaration)
  >   a + 10                                     # (computation)
  >   @function f                                # (class declaration)

  2.6 Literals
  -------------

  Literals are values that can be fully described when they are declared.
  Literals include numbers, strings and primitive data-types such as lists and
  dictionaries (yes, Sugar is a modern language !).

  Numbers
  -------

  Number are either _integers_ or _floats_, expressed using various notations:

  >   1                                          # (integer)
  >   -10                                        # (integer)
  >   1.0                                        # (float)
  >    .0                                        # (float)
  >   -2.0                                       # (float)
  >   0xFFEE00                                   # (integer in hexadecimal)

  Strings are the same as in C, excpeted that you can use both single and double
  quotes to delimit the string (syntax additions coming soon !):

  >   "Hello, World"                             # (double quote)
  >   'Hello, World'                             # (single quote)
  >   'Hello, "World" !'                         # (single quote)
  >   "Hello, \"World\" !"                       # (escaping)

    Note _____________________________________________________________________
    There is no way right now to define an encoding for the string (no unicode
    string support).

  Lists
  -----

  Sugar also supports lists and dictionaries as literal (we call them _primitive
  compound types_):

  >   []
  >   [1,2,3]
  >   [1,2,3,["a", "b", "c", "d"]]
  
  Lists can have any value in them (this includes lists, of course).

  >   []
  >   ["one",2]
  >   [1,[2,[3,[4]]]]

  Dictionaries
  ------------

  Dictionaries are defines as a comma-separated 'KEY : VALUE' list. The key is a
  regular sugar _symbol_:
  
  >   {one:1, two:2}

  or can be an _expression_ when the key is surrounded by parentheses:

  >   {("o" + "ne"):1, ("tw" + "o"):2}
  >   {(1):1, (2):2, (3):3}

  Dicts can have any value in them (this includes dicts and lists, of course).

  >   {}
  >   {one:1,two:2,three:3}
  >   {id:0,attributes:{name:"Bob",email:"bob@email.org"}}


    Note _____________________________________________________________________
    Some back-ends may not support declaration of dictionaries with expressions
    as keys (but the main ones do !). In this case, an error will be produced at
    program translation time.

  2.7 Symbolic values
  -------------------

  Symbolic values are specific values of the programming language like 'None' in
  Python or 'null' or 'undefined' in JavaScript. They represent singleton
  values.

  Sugar defines the following symbolic values:

    - 'Undefined' allowing to denote something that is not defined yet
      (typically a declared variable that has not been affected a value)

    - 'None', representing the absence of value (typically the value returned by
      functions returning no other value).

    - 'True', the well-known and well-named (typically something not false ;)

    - 'False', the well-known and well-named (typically something not not false ;)

    - 'NaN', a value indicating that a computation went bad (typically used when
      you express some computation that was not computable).

    - 'Error', can be used to indicate that an error happened in a process
      (typically used in asynchronous programming and pattern-matching)

    - 'Success' indicates that a process succeeded
      (typically used in asynchronous programming and pattern-matching)

    - 'Timeout' indicates that a timeout happened in a process
      (typically used in asynchronous programming and pattern-matching)

    - '_' which is the well-known ''joker'' symbol from Prolog (see
      [pattern-matching]())

  This may seem like a lot of values, but it's a good thing to learn them and
  understand their role. You'll find this very useful in the long run !

  2.8 Allocations
  ----------------

  Values have to be bound to symbols to be usable in the program. Variables
  represent _slots_ (think of a named box to put stuff in) that can hold values,
  and can be referenced with a _symbol_ (the variable name).

  Slots are _allocated_ by declaring a variable (a symbol that will represent
  the slot) using the 'var' keyword:

  >   var SYMBOL                                 # (allocation)

  An initial value can be _bound_ to the slot. This value is represented by an
  expression. The operation that will evaluate the expression and bind the
  resulting value to the slot is called an _assignment_.

  >   var SYMBOL = EXPRESSION                    # (allocation and assignment)

  in practice:

  >   var fruits = ["apple", "cherry", "banana"]

  if declare a slot without a value, its value will be 'Undefined'

  >   var fruits

  When declaring a slot, you have the opportunity to associate a _type
  declaration_ with the slot:

  >   var SYMBOL:TYPE (=EXPRESSION)?             (type declaration)

  the 'TYPE' declaration is a type expression that allows to constrain the usage
  of the slot. We'll talk about this in more detail in the [type system]
  section. As a simple illustration:

  >   var fruits:List

  will indicate that the 'fruits' symbol references a slot which values must be
  compatible with type 'List'. If you try to _assign_ a number or a string to
  'fruits', you'll have a warning (if the compiler is not too strict) or an error.

  Allocations also support the declaration of multiple variables at once as well
  as the assignment of ''slices'' of a value. We'll detail multiple variables
  declaration here, but leave the _slices assignment_ to the next section.

  So multiple values can be declared like this

  >   var a,b                                    # (multiple allocations)
  >   var a=1,b=2b                               # (mult. alloc. and assign.)
  >   var a:List, b=2, c:String="Hello"          # (mult. alloc. with type)

  in general you can put multiple 'var' declarations in one single line using
  this syntax. However, we recommend to only use it for simple cases where you
  only assign literals:

  >   var one=1, two=2

  Summary:

  >   var SYMBOL                                 (allocation)
  >   var SYMBOL:TYPE                            (allocation + type)
  >   var SYMBOL = EXPRESSION                    (allocation + assignment)
  >   var SYMBOL:TYPE = EXPRESSION               (allocation + type + assignment)
  >   var SYM:TYP=EXP, SYM:TYP=EXP, ...          (multiple alloc+type+assign)

  2.9 Assignments
  ---------------

  Assignments are actually a subset of allocations in the sense that allocations
  both allocate a slot, and assign a value (bind the value to the slot). In this
  respect, they share the same syntax, excepted that you have the 'var' keyword
  prefix for allocations.

  Assignments in Sugar are made using the '=' operator:

  >   SYMBOL = EXPRESSION                        (assignment)

  here is a very trivial example.

  >   fruits = ["orange", "pear", "tangerine"]

  this is a perfect example to introduce the _slices assignment_ we mentioned
  earlier. Some values may provide support for slicing ('[1,2,3]' can be sliced
  in '1', '2', '3'), in which case the slices can be directly assigned to
  variables:

  >   orange, pear, tangerine = ["orange", "pear", "tangerine"]

  will assign '"orange"' to 'orange', and '"pear"' to 'pear' (ha !) and
  '"tangerine"' to 'tangerine'. However:

  >   orange, pear_tangerine = ["orange", "pear", "tangerine"]

  will fail because there is one more element that was not assigned.
  
    Note ______________________________________________________________________
    When using slices assignment, you have to make sure that every slice is
    assigned to a variable. This limits the practical use cases for that to the
    places where you are sure of the type of expression you assign from.

  Sugar offers an alternative syntax for the _slices assignment_ that allows you
  to care less about the number of slices:
  this:

  >   orange | pear_tangerine = ["orange", "pear", "tangerine"]

  will assign '"orange"' to 'orange', and 'pear_tangerine' will be assigned with
  the _rest_ of the expression:'["pear","tangerine"]'. This is something that
  people coming from functional programming languages will be familiar with.
  
  The '|' in the assignment meaning the rest, you can combine ',' and '|' in one
  statement: 

  >   orange, pear | tangerine = ["orange", "pear", "tangerine"]

  in which case 'orange' will be '"orange"', 'pear' will be '"pear"' and
  'tangerine' will be '["tangerine"]' (the rest being always a list or a subset
  of the original container).

  If you ask the rest of an empty list, you'll have 'None'

  >   orange | pear = ['orange']

  in this case, 'pear' will be 'None', and you won't get any error. However, if
  you do

  >   orange, pear | tangerine = ['orange']

  you will have an error because your expression won't have enough slices


    Note ______________________________________________________________________
    When using the _rest_ operator, you still have to make sure that your
    expression has as many slices as there are symbols before the rest
    operators, otherwise the assignment won't be able to complete.

  As mentioned in [allocations](), you can simply prefix assignments with 'var' to
  turn the assignments into allocations and assignments.

  Summary:

  >   SYMBOL = EXPRESSION                        (single assignment)
  >   SYMBOL (,SYMBOL)* = EXPRESSION             (spice assignment)
  >   SYMBOL (,SYMBOL) | SYMBOL = EXPRESSION     (slice assignment with rest)

  2.10 Computations
  -----------------

  Computations are what everybody's most familiar with: basic arithmetic
  operations applied to values. Each computation uses an operator, chosen among
  the following list:

   - an arithmetic operator: '+', '-', '/', '*', '^' '%'
   - a comparison operator: '<', '>', '==', '!='
   - a logic operator: 'and', 'or', 'not'
   - specific operators: 'is', 'isa', 'like', 'has'
#  - bit-wise operators: '&', '|', '<<', '>>' 

  most operators take two operands, excepted the 'not' operator which only takes
  one operand to its right. The general form of computations is as follows:

  >   OPERATOR EXPRESSION                        (single-operand operation)
  >   EXPRESSION OPERATOR EXPRESSION             (operation with two operands)

    Note _____________________________________________________________________
    Sugar does not define suffix operations (like '--' or '++' as in C), but we
    may add them as a later point. There are not bit-manipulation operators
    ('||' '&&', '<<' and ''>>') yet.

  Here are example of operations using _arithmetic operators_:

  >   1 + 1                                      (addition)
  >   5 * 2                                      (multiplication)
  >   5 ^ 2                                      (power)
  >   5 / 2                                      (division)
  >   5 % 2                                      (modulo)

  here are _comparison operators_:

  >   1 < 2                                      (smaller than)
  >   2 > 2                                      (greater than)
  >   1 <= 2                                     (smaller or equal to)
  >   1 >= 2                                     (greater or equal to)
  >   1 == 1                                     (equal to)
  >   5 != 2                                     (not equal to)

  here are _logic operators_:

  >   not True                                   (negation)
  >   True or False                              (logical union)
  >   True and False                             (logical intersection)

  _specific operators_ have a semantic that will be detailed later in the
  [object model]() section. They are all related to doing queries on values (and
  objects in particular):

   - _value identification_ allows to tell whether two values are actually the
     exact same object.

   - value approximation_ allows to tell whether two values are ''like'' each
     other (they do not need to be the exact same, but should be used
     interchangeably)

   - _object type identification_ allows to tell whether the given value/object
     is of the given type/class. This is basically what 'instanceof' do in other
     languages.

   - _object slot querying_ allows to tell if an object defines a particular
     slot (even if the slot value is 'Undefined').

  >   object_a is object_b                       (value identification)
  >   object_a isa ObjectClass                   (value type identification)
  >   object_a like object_b                     (value approximation)
  >   object has name                            (slot querying)

  Additionally, it is possible to combine assignment and operations for a subset
  of arithmetic operations:

  >   a += 1                                     (a = a + 1)
  >   a -= 1                                     (a = a - 1)

  Summary:

  >   OPERATOR EXPRESSION                        (single-operand operation)
  >   EXPRESSION OPERATOR EXPRESSION             (operation with two operands)
  >   SYMBOL += EXPRESSION                       (assignment with addition)
  >   SYMBOL -= EXPRESSION                       (assignment with substraction)

  2.11 Invocations
  ----------------

  An invocation is the application of a set of values to another value (a function)
  that can be invoked (we call them _invocables_). The invocation will typically
  result in a value (the invocation is then an expression, as it ''evaluates to a
  value'').

  In Sugar, invocations have a very common syntax:

  >   EXPRESSION ( EXPRESSION, EXPRESSION, EXPRESSION, ... )

  where the first 'EXPRESSION' must (of course) evaluate to something that can
  be invoked.  These expression are typically references to functions, which
  we'll introduce [soon](functions).

  The 'EXPRESSION's within parentheses are the (actual) _arguments_ (parameters)
  to the invocable (function).

  When your invocation has long expressions as arguments, Sugar allows you to
  make the invocation span multiple lines:

  >   EXPRESSION ( EXPRESSION, EXPRESSION,
  >   <tab>EXPRESSION
  >   )

  when using newlines, you can omit the trailing comma on the first line (but)
  trailing commas on the body lines aren't allowed:

  >   EXPRESSION ( EXPRESSION
  >   <tab>EXPRESSION
  >   )

  also, you're not forced to put an argument after the opening paren:

  >   EXPRESSION (
  >   <tab>EXPRESSION
  >   <tab>EXPRESSION
  >   )

  Sugar also provides way to indicate _named arguments_, in case you'd like to
  specify the arguments out of order. Here is how to do this

  >   EXPRESSION (SYMBOL=EXPRESSION,...)         # (named arguments)

  and here is an example of two similar invocations:

  >   juice( "orange", spice="cinnamon", blend="thin" )
  >   juice( "orange", blend="cinnamon", spice="thin" )

  When using _named_ arguments, you have to make sure they appear after the
  non-named arguments.

  Sugar also offers a way to specify optional arguments as a list

  >   EXPRESSION (...EXPRESSION)                 # (optional arguments)

  in practice:

  >   var fruits = ["apple", "orange", "tangerine")
  >   juice(...fruits)
  
  will be equivalent to

  >   juice("apple", "orange", "tangerine")

  you can do the same with named arguments:

  >   EXPRESSION (...=EXPRESSION)                # (optional arguments)

  in practice:

  >   var fruits = {fruit:"orange", spice="cinnamon", blend="thin")
  >   juice(...=fruits)
  
  will be equivalent to

  >   juice(fruit="orange", spice="cinnamon", blend="thin")

  When using '...' or '...=', you have to make sure they are the last to appear
  in the arguments. When both are used '...=' should be the last. Here is a
  complete example:

  >   fooize("orange", ...(["tangerine", "cherry"]), ...=({spice:"cinnamon}))

    Note ______________________________________________________________________
    It may be useful to note that some (or most) functions may not accept extra
    named or unnamed parameters. Have a look at the [functions] section to know
    a little bit more about the why.

  Summary:

  >   EXPRESSION()                               (invocation w/o arguments)
  >   EXPRESSION(EXPRESSON)                      (invocation w/ argument)
  >   EXPRESSION(SYMBOL=ARGUMENTS)               (name arguments)
  >   EXPRESSION(...ARGUMENTS)                   (optional arguments)
  >   EXPRESSION(...=ARGUMENTS)                  (optional named arguments)
  >   EXPRESSION(ARG,...ARG,...=ARG)             (combination)
  >   
  >   EXPRESSION(                                (multi-line invocation)
  >   <tab>EXPRESSION
  >   )

  2.13 Anonymous functions
  ------------------------

  Sugar allows _anonymous functions_ to be defined and used a values, like
  numbers, strings, lists and dictionaries. An anonymous function is composed of
  a set of statements (the function _body_) as well as the specification of the
  function _arguments_:

  >   { ARGUMENT, ARGUMENT | STATEMENTS }

  the list of arguments can be empty, in which case you can write the function
  as follows (provided it cannot be mis-interpreted with a dictionary literal).

  >   { STATEMENTS }

  As Sugar is quite strict about whitespace, the 'STATEMENTS' have to follow a
  very specific scheme:

  >   var SYMBOL                                 (allocation)
  >   { ARGUMENTS | STATEMENT ; STATEMENT }      (one-liner)
  >   
  >   { ARGUMENTS | STATEMENT                    (more than one line)
  >   <tab>STATEMENT
  >   }
  >   
  >   { ARGUMENTS |                              (more than one line variant)
  >   <tab>STATEMENT
  >   }

  this syntax is designed to enforce a consistent presentation of anonymous
  functions.

  Also, Sugar _anonymous functions_ are actually _closures_, meaning that you
  can use variables defined in the enclosing scope. When you use these
  variables, they reference the value of the variable at the time of the
  function declaration, not invocation.

  >   var a = 1
  >   var f = { return a }
  >   a = 10
  >   f() == 1                                   (will evaluate 'True')

  in a sense, variables implicitly referenced in anonymous function could be
  rewritten as:

  >   var a = 1
  >   var f = { var a=1 ; return a }

    Note _____________________________________________________________________
    To the difference of other languages (JavaScript, for instance),
    referencing and re-assigning an external variable from within a closure
    won't affect the external variable. External variables are actually copied
    in the scope of the closure, exactly as illustrated by the above example.

  Summary:

  >   {|}                                        (empty function)
  >   {ARGUMENT|STATEMENT}                       (single argument and statement)
  >   {A1,A2,A3|STATEMENT}                       (multi arg. single statement)
  >   {A1,A2,A3|S1;S2;S3}                        (multi argument and statement)

  2.12 Function declaration
  -------------------------

  Functions in Sugar are a bit different from Anonymous Functions/Closures, both
  from their syntax and semantics. Functions are only defined within _modules_
  (we'll see them soon) and don't ''close'' on their environment as closures do.

  From a syntactic point of view, functions are a little bit more verbose:

  >   @function f
  >     print ("Hello, World !")
  >   @end

  Which is less compact than the closure-equivalent:

  >   {print ("Hello, World !")}

  So functions are always declared by using the following form

  >   @function NAME ARG, ARG=VAL, REST..., KWARGS=...
  >   <INDENT> STATEMENT
  >   <INDENT> ...
  >   @end

  First thing to notice here is that the function _body_ (the statements within
  the function) has to be indented (use tabs !), and that the function
  declaration ends explicitly with the '@end' keyword.

  This is a common pattern in Sugar syntax, where declarations always start with
  '@something', have an indented body and end with '@end'.

  You'll notice that the above function declaration has different syntaxes for
  the argument, which all denote a specific role for the argument:

  - 'ARG' is a ''standard'' argument
  - 'ARG=VAL' is an argument with a _default value_
  - 'ARGS...' is an argument that represents the rest of the arguments
  - 'ARGS=...' is an argument that represents the rest of the named parameters
    passed at invocation time.

  Those knowing Python won't find this difficult to understand, but this may
  need some explanation. Imagine you have

  >   @function f a, b=1, args..., kwargs...
  >       ...
  >   @end
  
  and you do this successive invocations

  >   f(1)                                       [1]
  >   f(1,2)                                     [2]
  >   f(1,2,3)                                   [3]
  >   f(1,2,3,4)                                 [4]
  >   f(a=1,b=2)                                 [5]
  >   f(a=1,b=2,c=3)                             [6]
  >   f(1,2,3,d=4)                               [7]

  You'll have:

  - in case 1, 'a' as '1', b as '1', 'args' as '[]' and 'kwargs' as '{}'
  - in case 2, 'a' as '1', b as '2', 'args' as '[]' and 'kwargs' as '{}'
  - in case 3, 'a' as '1', b as '2', 'args' as '[3]' and 'kwargs' as '{}'
  - in case 4, 'a' as '1', b as '2', 'args' as '[3,4]' and 'kwargs' as '{}'
  - in case 5, 'a' as '1', b as '2', 'args' as '[]' and 'kwargs' as '{}'
  - in case 6, 'a' as '1', b as '2', 'args' as '[]' and 'kwargs' as '{c:3}'
  - in case 6, 'a' as '1', b as '2', 'args' as '[3]' and 'kwargs' as '{c:3}'

  The pattern here is rather simple:

  - 'args' and 'kwargs' both represents extra arguments that were not formally
    named in the function declaration
  - 'args' will contain the list of extra arguments passed without names at
    invocation time (see [invocations])
  - 'kwargs' will contain the list of extra arguments passed with names at
    invocation time.

  Note that if you specify both 'ARGS...' and 'ARGS=...', 'ARG...' must come
  first. Also if you don't specify 'ARGS...' your function won't accept an
  invocation with a different number of unnamed parameters, and if you don't
  specify 'ARGS=...' in you function, it won't accept an invocation with extra
  named parameters.

  Summary:

  >   @function NAME ARG, ARG, ARG               (function declaration start)
  >   <tab>STATEMENT                             (function body)
  >   @end                                       (function declaration end)
  >   ARG                                        (unnamed argument)
  >   ARG:TYPE                                   (unnamed typed argument)
  >   NAME=ARG                                   (named argument)
  >   NAME:TYPE=ARG                              (named typed argument)
  >   ARGS...                                    (extra unnamed arguments)
  >   ARGS=...                                   (extra named arguments)


  2.12 An example
  ---------------

  We've finished the first important section of this manual, and you should now
  have a good idea of the basics of Sugar. Here is an example that sums up what
  we've learned so far:

  >   TODO

3. Object model
===============

  Sugar was designed as an object-oriented programming language, because it's
  hard to live without objects when you do software engineering. Sugar
  object-model is _class-based_ (as opposed to _prototype-based_) and is very
  similar to what you know from commonly practiced OO languages such as Java,
  C++, C#, Python or Ruby.

  As Sugar was designed as an easy-to-learn language for people familiar with
  existing OO languages, we decided not to use (by default) something more
  elegant (but trickier) such as prototypes.

  3.1 LambdaFactory and hosts
  ---------------------------

  It's good to recall that Sugar is merely a syntax for the LambdaFactory
  program modeling API. In that sense, Sugar only provide a ''syntactic sugar''
  (no pun intended ;) to the creation of a LambdaFactory program tree.

  The side-effect of that, is that most of the properties of the object model
  are left up to the host language to which LambdaFactory trees can be
  translated.

  If you translate to Python, you'll have an actual class-based object model,
  but if you translate to JavaScript, you'll have a class-based object model
  sitting on top of a prototype-based object model.

  LambdaFactory runtime provides support for class-based OO model for every
  host language it supports, so that in practice, you don't have to think too
  much about what language your Sugar code will be translated to.

  3.2 Objects
  -----------

  Objects in Sugar are conceptually viewed as ''entities communicating by
  message-passing'', which is basically the definition that Smalltalk people
  would give for objects. In practice, Sugar gives you objects which are ''a
  state and a set of operations to access and manipulate this state'', which is
  more like the Java/C++ definition of objects.

  Again, as Sugar relies on LambdaFactory, which itself abstracts from different
  programming-languages (''hosts''), the actual object model depends
  on the model provided by the ''host''.

  So, to make a long story short, object are composed of:

  - a _state_, which is the aggregation of the object _attributes_
  - _operations_, which is the collection of the _methods_ available to the
    object

  Objects also carry _type information_, but this is something that we'll cover
  in the next section. In the class-based object model, the basic object type
  information is simply being able to get the _class_ to which the object
  belongs, or a least offer an operation that allows to tell if an object
  belongs to a class.

  Object state and operations are two separated things in the Sugar object-model:

  - Objects have _slots_ to which values can be _bound_. The state of an object,
    aka its attributes is implemented as values bound to slots.

  - Object operations, or _methods_ are not necessarily implemented as functions
    bound to slots (this depends on the host language). Conceptually, an object
    responds to a message (method invocation), and the way it responds to this
    message it up to the object itself (that's the encapsulation principle) --
    so it doesn't matter where the object looks into his slots or looks in a
    class definition to resolve the actual piece of code that makes up the
    operation.

  Note _________________________________________________________________________
  It's important to note that because of possible different implementations of
  attributes/operations, it's not allowed in Sugar to have an operation with the
  same name as an attribute.

  Summary:

  >        ---------------------
  >       |    OBJECT:CLASS     |       An OBJECT has a parent CLASS
  >       |---------------------|
  >       | SLOT=VALUE          |       The object SLOTS hold values for
  >       | SLOT=VALUE          |       the object ATTRIBUTES.
  >       | ...                 |
  >       |---------------------|
  >       | METHOD(...)         |       The object METHODS are MESSAGES
  >       | METHOD(...)         |       to which the object responds.
  >       | ...                 |
  >        --------------------- 

  3.3 Class
  ---------

  As we just said, Sugar object model is _class-based_, meaning that you define
  abstractions by declaring a class. I won't go into the details of what a class
  is conceptually (there is plenty of good literature on that topic), but I can
  at least detail what a Sugar class is:

  - A Sugar class is a collection of _attributes_ and _method_ declarations


  3.4 Protocols
  -------------

  3.5 Modules
  -----------

4. Type system
===============

5. Meta-programming
===================


  5.1 Embedding code
  ------------------


  5.2 Specific sections
  ---------------------

  5.3 Rewriting invocations
  -------------------------

6. Standard library
===================

# EOF - vim: ts=2 sw=2 et syn=kiwi
